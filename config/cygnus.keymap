#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include "zmk-helpers/helper.h"
#include <behaviors/num_word.dtsi> // requires auto-layer module

#include "key-label.h"                                                                                          // key-position labels
#define KEYS_L LN0 LN1 LN2 LN3 LN4 LN5 LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5  // left-hand keys
#define KEYS_R RN0 RN1 RN2 RN3 RN4 RN5 RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5  // right-hand keys
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                                                          // thumb keys

#define DEFAULT 0
#define LOWER 1
#define RAISE 2
#define BLUETOOTH 3

#define QUICK_TAP_MS 175

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_HOLD_TAP(NAME, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )
MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs


/ {
    combos {
        compatible = "zmk,combos";

        bluetooth {
            bindings = <&mo BLUETOOTH>;
            key-positions = <LH2 RH2>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  ESC |  1  |  2  |  3  |  4  |  5  |   |  6  |  7   |  8  |  9  |  0  |  ?   |
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp GRAVE          &kp N1        &kp N2       &kp N3         &kp N4         &kp N5             &kp N6       &kp N7        &kp N8        &kp N9       &kp N0           &kp MINUS
&kp RIGHT_BRACKET  &kp Q         &kp W        &kp E          &kp R          &kp T              &kp Y        &kp U         &kp I         &kp O        &kp P            &kp LEFT_BRACKET
&kp NUHS           &hml LGUI A   &hml LALT S  &hml LSHFT D   &hml LCTRL F   &kp G              &kp H        &hmr RCTRL J  &hmr RSHFT K  &hmr RALT L  &hmr RGUI SEMI   &kp SQT
&kp LSHFT          &kp Z         &kp X        &kp C          &kp V          &kp B              &kp N        &kp M         &kp COMMA     &kp DOT      &kp SLASH        &kp RIGHT_SHIFT
                                              &lt 3 ESC      &lt 2 DELETE   &lt 1 BACKSPACE    &lt 2 SPACE  &lt 1 ENTER   &lt 3 TAB
            >;
        };

        layer_1 {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  F1 |  F2 |  F3 |  F4 |  F5 |   |  F6 |  F7 |  F8 |  F9 | F10 | BKSP |
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans   &trans          &trans               &trans            &trans          &trans    &kp KP_NUMLOCK  &trans               &trans               &trans              &trans            &trans
&kp TAB  &trans          &trans               &kp PAGE_UP       &trans          &trans    &trans          &kp N7               &kp N8               &kp N9              &trans            &trans
&trans   &hml LGUI HOME  &hml LALT ESC  &hml  LSHFT PAGE_DOWN   &hml LCTRL END  &trans    &trans          &hmr RCTRL NUMBER_4  &hmr RSHFT NUMBER_5  &hmr RALT NUMBER_6  &hml RGUI KP_DOT  &trans
&trans   &caps_word      &trans               &trans            &trans          &trans    &kp NUMBER_0    &kp NUMBER_1         &kp NUMBER_2         &kp NUMBER_3        &trans            &trans
                                              &trans            &trans          &trans    &trans          &trans               &trans
            >;
        };

        layer_2 {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans   &kp F1  &kp F2  &kp F3  &kp F4  &kp F5    &kp F6  &kp F7          &kp F8          &kp F9        &kp F10              &kp F11
&kp TAB  &trans  &trans  &trans  &trans  &trans    &trans  &trans          &kp UP_ARROW    &trans        &trans               &kp F12
&trans   &trans  &trans  &trans  &trans  &trans    &trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW      &trans
&trans   &trans  &trans  &trans  &trans  &trans    &trans  &trans          &trans          &trans        &num_word LOWER      &trans
                         &trans  &trans  &trans    &trans  &trans          &trans
            >;
        };

        bluetooth {
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &trans  &bt BT_CLR    &trans  &kp C_REWIND      &trans        &kp C_FAST_FORWARD  &trans  &trans
&trans        &trans        &trans        &trans        &trans  &trans        &trans  &kp K_PREV        &kp C_VOL_UP  &kp K_NEXT          &trans  &trans
&trans        &trans        &trans        &trans        &trans  &trans        &trans  &kp K_PLAY_PAUSE  &kp C_VOL_DN  &kp K_MUTE          &trans  &trans
&trans        &trans        &trans        &trans        &trans  &trans        &trans  &trans            &trans        &trans              &trans  &trans
                                          &trans        &trans  &trans        &trans  &trans            &trans
            >;
        };
    };
};
